# Generated by Django 5.2.5 on 2025-08-12 06:54

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('agent_id', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9_-]+$', 'Agent ID can only contain letters, numbers, underscores, and hyphens')])),
                ('name', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9 .-]+$', 'Name can only contain letters, numbers, spaces, periods, and hyphens')])),
                ('current_role', models.CharField(blank=True, choices=[('contestant', 'Contestant'), ('host', 'Host'), ('producer', 'Producer'), ('participant', 'Participant'), ('observer', 'Observer')], default='participant', max_length=100)),
                ('specialization', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('performance_rating', models.FloatField(default=0.0, help_text='Performance rating from 0.0 to 10.0', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['current_role'], name='dating_show_current_7101c1_idx'), models.Index(fields=['is_active'], name='dating_show_is_acti_9b28c2_idx'), models.Index(fields=['created_at'], name='dating_show_created_0366fa_idx')],
            },
        ),
        migrations.CreateModel(
            name='GovernanceVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_id', models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9_-]+$', 'Vote ID can only contain letters, numbers, underscores, and hyphens')])),
                ('vote_type', models.CharField(choices=[('rule_proposal', 'Rule Proposal'), ('amendment', 'Constitutional Amendment'), ('punishment', 'Punishment Decision'), ('resource_allocation', 'Resource Allocation'), ('leadership_election', 'Leadership Election'), ('policy_change', 'Policy Change')], max_length=30)),
                ('title', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator('^[\\w\\s.,!?()-]+$', 'Title contains invalid characters')])),
                ('description', models.TextField(validators=[django.core.validators.RegexValidator('^[\\w\\s.,!?()\\n\\r-]+$', 'Description contains invalid characters')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('voting_deadline', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active Voting'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=10)),
                ('result', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('abstain', 'Abstain')], max_length=10, null=True)),
                ('required_majority', models.FloatField(default=0.5, help_text='Required majority as decimal (0.5 = 50%)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('minimum_participation', models.FloatField(default=0.25, help_text='Minimum participation rate as decimal (0.25 = 25%)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('total_eligible_voters', models.PositiveIntegerField(default=0)),
                ('proposed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposed_votes', to='dating_show_api.agent')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ConstitutionalRule',
            fields=[
                ('rule_id', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9_-]+$', 'Rule ID can only contain letters, numbers, underscores, and hyphens')])),
                ('category', models.CharField(choices=[('behavior', 'Behavioral Rules'), ('resource', 'Resource Management'), ('social', 'Social Interaction'), ('governance', 'Governance Process'), ('punishment', 'Punishment Guidelines'), ('ethics', 'Ethical Guidelines'), ('safety', 'Safety Protocols')], max_length=20)),
                ('title', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator('^[\\w\\s.,!?()-]+$', 'Title contains invalid characters')])),
                ('content', models.TextField(validators=[django.core.validators.RegexValidator('^[\\w\\s.,!?()\\n\\r-]+$', 'Content contains invalid characters')])),
                ('priority', models.IntegerField(default=0, help_text='Rule priority (-100 to 100, higher is more important)', validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('enforcement_level', models.CharField(choices=[('advisory', 'Advisory'), ('warning', 'Warning Level'), ('mandatory', 'Mandatory'), ('critical', 'Critical')], default='mandatory', max_length=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('amended_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('violation_count', models.PositiveIntegerField(default=0, editable=False)),
                ('compliance_rate', models.FloatField(default=1.0, editable=False, help_text='Compliance rate (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('amended_by_vote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='amended_rules', to='dating_show_api.governancevote')),
                ('created_by_vote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dating_show_api.governancevote')),
            ],
            options={
                'ordering': ['-priority', 'category', 'title'],
            },
        ),
        migrations.CreateModel(
            name='SimulationState',
            fields=[
                ('simulation_id', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9_-]+$', 'Simulation ID can only contain letters, numbers, underscores, and hyphens')])),
                ('status', models.CharField(choices=[('initializing', 'Initializing'), ('running', 'Running'), ('paused', 'Paused'), ('stopped', 'Stopped'), ('error', 'Error State'), ('completed', 'Completed')], default='stopped', max_length=15)),
                ('current_step', models.IntegerField(default=0, help_text='Current simulation step number', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_steps', models.IntegerField(default=1000, help_text='Maximum number of simulation steps', validators=[django.core.validators.MinValueValidator(1)])),
                ('total_agents', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('active_agents', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('current_time', models.DateTimeField()),
                ('simulation_start_time', models.DateTimeField(blank=True, null=True)),
                ('simulation_end_time', models.DateTimeField(blank=True, null=True)),
                ('performance_metrics', models.JSONField(default=dict, help_text='Performance and statistical metrics as JSON')),
                ('configuration', models.JSONField(default=dict, help_text='Simulation configuration parameters as JSON')),
                ('error_message', models.TextField(blank=True, help_text='Error details if simulation failed')),
                ('step_duration_ms', models.FloatField(default=0.0, help_text='Average step duration in milliseconds', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
                'indexes': [models.Index(fields=['status'], name='dating_show_status_4230cd_idx'), models.Index(fields=['current_step'], name='dating_show_current_6ce0af_idx'), models.Index(fields=['updated_at'], name='dating_show_updated_3da3be_idx')],
            },
        ),
        migrations.CreateModel(
            name='SocialRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_type', models.CharField(choices=[('friendship', 'Friendship'), ('romantic', 'Romantic Interest'), ('alliance', 'Alliance'), ('rivalry', 'Rivalry'), ('neutral', 'Neutral'), ('mentorship', 'Mentorship'), ('conflict', 'Conflict')], max_length=20)),
                ('strength', models.FloatField(default=0.0, help_text='Relationship strength from -1.0 (very negative) to 1.0 (very positive)', validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('strength_level', models.CharField(blank=True, choices=[('very_weak', 'Very Weak'), ('weak', 'Weak'), ('moderate', 'Moderate'), ('strong', 'Strong'), ('very_strong', 'Very Strong')], editable=False, max_length=12)),
                ('established_date', models.DateTimeField(auto_now_add=True)),
                ('last_interaction', models.DateTimeField(blank=True, null=True)),
                ('interaction_count', models.PositiveIntegerField(default=0)),
                ('mutual', models.BooleanField(default=False, help_text='Whether this relationship is mutual')),
                ('notes', models.TextField(blank=True, help_text='Additional relationship context')),
                ('agent_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_as_a', to='dating_show_api.agent')),
                ('agent_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_as_b', to='dating_show_api.agent')),
            ],
            options={
                'ordering': ['-strength', '-last_interaction'],
            },
        ),
        migrations.CreateModel(
            name='VoteCast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('abstain', 'Abstain')], max_length=10)),
                ('weight', models.FloatField(default=1.0, help_text='Vote weight for weighted voting systems (0.0-10.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('cast_at', models.DateTimeField(auto_now_add=True)),
                ('reasoning', models.TextField(blank=True, help_text="Agent's reasoning for their vote choice", validators=[django.core.validators.RegexValidator('^[\\w\\s.,!?()\\n\\r-]*$', 'Reasoning contains invalid characters')])),
                ('confidence', models.FloatField(default=0.5, help_text="Agent's confidence in their vote (0.0-1.0)", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cast_votes', to='dating_show_api.agent')),
                ('vote', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cast_votes', to='dating_show_api.governancevote')),
            ],
            options={
                'ordering': ['-cast_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentMemorySnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memory_type', models.CharField(choices=[('episodic', 'Episodic Memory'), ('semantic', 'Semantic Memory'), ('temporal', 'Temporal Memory'), ('working', 'Working Memory'), ('skill', 'Skill Memory'), ('social', 'Social Memory')], max_length=50)),
                ('content', models.JSONField(default=dict, help_text='Memory content as JSON structure')),
                ('importance_score', models.FloatField(default=0.0, help_text='Importance score from 0.0 to 10.0', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('emotional_valence', models.FloatField(default=0.0, help_text='Emotional valence from -1.0 (negative) to 1.0 (positive)', validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('archived', 'Archived'), ('deleted', 'Deleted'), ('decayed', 'Naturally Decayed')], default='active', max_length=10)),
                ('decay_rate', models.FloatField(default=0.01, help_text='Daily memory decay rate (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for categorization', max_length=500)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memory_snapshots', to='dating_show_api.agent')),
            ],
            options={
                'ordering': ['-created_at', '-importance_score'],
                'indexes': [models.Index(fields=['memory_type'], name='dating_show_memory__713e29_idx'), models.Index(fields=['importance_score'], name='dating_show_importa_440cbd_idx'), models.Index(fields=['created_at'], name='dating_show_created_07ddbb_idx'), models.Index(fields=['last_accessed'], name='dating_show_last_ac_1bbaa6_idx'), models.Index(fields=['status'], name='dating_show_status_268c29_idx')],
            },
        ),
        migrations.CreateModel(
            name='AgentSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9_\\s-]+$', 'Skill name can only contain letters, numbers, spaces, underscores, and hyphens')])),
                ('skill_level', models.FloatField(default=0.0, help_text='Skill level from 0.0 to 100.0', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('experience_points', models.FloatField(default=0.0, help_text='Total experience points accumulated', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('category', models.CharField(blank=True, choices=[('physical', 'Physical'), ('mental', 'Mental'), ('social', 'Social'), ('creative', 'Creative'), ('technical', 'Technical'), ('survival', 'Survival')], max_length=20)),
                ('proficiency_rank', models.CharField(blank=True, editable=False, max_length=20)),
                ('decay_rate', models.FloatField(default=0.01, help_text='Daily skill decay rate (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('last_practiced', models.DateTimeField(blank=True, null=True)),
                ('discovery_date', models.DateTimeField(auto_now_add=True)),
                ('practice_count', models.PositiveIntegerField(default=0)),
                ('mastery_bonus', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='dating_show_api.agent')),
            ],
            options={
                'ordering': ['-skill_level', 'skill_name'],
                'indexes': [models.Index(fields=['skill_name'], name='dating_show_skill_n_da6623_idx'), models.Index(fields=['skill_level'], name='dating_show_skill_l_a63409_idx'), models.Index(fields=['category'], name='dating_show_categor_35e54a_idx'), models.Index(fields=['last_practiced'], name='dating_show_last_pr_947fc2_idx')],
                'unique_together': {('agent', 'skill_name')},
            },
        ),
        migrations.CreateModel(
            name='ComplianceViolation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severity', models.CharField(choices=[('minor', 'Minor'), ('moderate', 'Moderate'), ('major', 'Major'), ('severe', 'Severe'), ('critical', 'Critical')], max_length=10)),
                ('description', models.TextField(validators=[django.core.validators.RegexValidator('^[\\w\\s.,!?()\\n\\r-]+$', 'Description contains invalid characters')])),
                ('evidence', models.TextField(blank=True, help_text='Evidence supporting the violation claim', validators=[django.core.validators.RegexValidator('^[\\w\\s.,!?()\\n\\r-]*$', 'Evidence contains invalid characters')])),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('resolved', models.BooleanField(default=False)),
                ('resolution_status', models.CharField(choices=[('pending', 'Pending Review'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed'), ('appealed', 'Under Appeal')], default='pending', max_length=15)),
                ('punishment_applied', models.TextField(blank=True, validators=[django.core.validators.RegexValidator('^[\\w\\s.,!?()\\n\\r-]*$', 'Punishment description contains invalid characters')])),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('appeal_deadline', models.DateTimeField(blank=True, null=True)),
                ('severity_score', models.IntegerField(default=1, help_text='Numeric severity score (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='violations', to='dating_show_api.agent')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_violations', to='dating_show_api.agent')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dating_show_api.constitutionalrule')),
            ],
            options={
                'ordering': ['-detected_at', '-severity_score'],
                'indexes': [models.Index(fields=['severity'], name='dating_show_severit_2f9d48_idx'), models.Index(fields=['resolved'], name='dating_show_resolve_bf1b43_idx'), models.Index(fields=['resolution_status'], name='dating_show_resolut_1ee78f_idx'), models.Index(fields=['detected_at'], name='dating_show_detecte_6e99be_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='governancevote',
            index=models.Index(fields=['vote_type'], name='dating_show_vote_ty_d5f4cd_idx'),
        ),
        migrations.AddIndex(
            model_name='governancevote',
            index=models.Index(fields=['status'], name='dating_show_status_97633a_idx'),
        ),
        migrations.AddIndex(
            model_name='governancevote',
            index=models.Index(fields=['is_active'], name='dating_show_is_acti_f92850_idx'),
        ),
        migrations.AddIndex(
            model_name='governancevote',
            index=models.Index(fields=['voting_deadline'], name='dating_show_voting__c66e84_idx'),
        ),
        migrations.AddIndex(
            model_name='constitutionalrule',
            index=models.Index(fields=['category'], name='dating_show_categor_78a9e7_idx'),
        ),
        migrations.AddIndex(
            model_name='constitutionalrule',
            index=models.Index(fields=['priority'], name='dating_show_priorit_58c2b9_idx'),
        ),
        migrations.AddIndex(
            model_name='constitutionalrule',
            index=models.Index(fields=['is_active'], name='dating_show_is_acti_b696d1_idx'),
        ),
        migrations.AddIndex(
            model_name='constitutionalrule',
            index=models.Index(fields=['enforcement_level'], name='dating_show_enforce_e4685c_idx'),
        ),
        migrations.AddIndex(
            model_name='socialrelationship',
            index=models.Index(fields=['relationship_type'], name='dating_show_relatio_19a5c4_idx'),
        ),
        migrations.AddIndex(
            model_name='socialrelationship',
            index=models.Index(fields=['strength'], name='dating_show_strengt_a22f45_idx'),
        ),
        migrations.AddIndex(
            model_name='socialrelationship',
            index=models.Index(fields=['last_interaction'], name='dating_show_last_in_d43b55_idx'),
        ),
        migrations.AddIndex(
            model_name='socialrelationship',
            index=models.Index(fields=['mutual'], name='dating_show_mutual_a1b2c1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='socialrelationship',
            unique_together={('agent_a', 'agent_b')},
        ),
        migrations.AddIndex(
            model_name='votecast',
            index=models.Index(fields=['choice'], name='dating_show_choice_6cbfdc_idx'),
        ),
        migrations.AddIndex(
            model_name='votecast',
            index=models.Index(fields=['cast_at'], name='dating_show_cast_at_207991_idx'),
        ),
        migrations.AddIndex(
            model_name='votecast',
            index=models.Index(fields=['weight'], name='dating_show_weight_e06ce7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='votecast',
            unique_together={('vote', 'agent')},
        ),
    ]
